Traceback (most recent call last):
  File "/home/pewhite/github/aet-cs/aet-cs.github.io/white/ML/env/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/pewhite/github/aet-cs/aet-cs.github.io/white/ML/env/lib/python3.11/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/pewhite/github/aet-cs/aet-cs.github.io/white/ML/env/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/pewhite/.asdf/installs/python/3.11.9/lib/python3.11/asyncio/base_events.py", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/pewhite/github/aet-cs/aet-cs.github.io/white/ML/env/lib/python3.11/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/pewhite/github/aet-cs/aet-cs.github.io/white/ML/env/lib/python3.11/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/pewhite/github/aet-cs/aet-cs.github.io/white/ML/env/lib/python3.11/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------

# Define a function to calculate sunrise for a single row
def calculate_sunrise(row):
    # Extract the date from the 'valid' column (assuming it's already in datetime format)
    valid_date = row['valid'].date()
    # Calculate sunrise using the astral library
    s = sun(city.observer, date=valid_date)
    return s['sunrise']

def calculate_sunset(row):
    # Extract the date from the 'valid' column (assuming it's already in datetime format)
    valid_date = row['valid'].date()
    # Calculate sunrise using the astral library
    s = sun(city.observer, date=valid_date)
    return s['sunset']

def calculate_daylight(row):
    valid_date = row['valid'].date()
    s = sun(city.observer, date = valid_date)
    return s['sunset']>row['valid']>s['sunrise']

# Apply the function to each row of the DataFrame
# Note: If 'valid' is not in the datetime format, you'll need to convert it first
weather_data['sunrise'] = weather_data.apply(calculate_sunrise, axis=1)
weather_data['sunset'] = weather_data.apply(calculate_sunset, axis=1)
weather_data['daylight'] = weather_data.apply(calculate_daylight, axis=1)
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mAttributeError[0m                            Traceback (most recent call last)
Cell [0;32mIn[9], line 23[0m
[1;32m     19[0m     [38;5;28;01mreturn[39;00m s[[38;5;124m'[39m[38;5;124msunset[39m[38;5;124m'[39m][38;5;241m>[39mrow[[38;5;124m'[39m[38;5;124mvalid[39m[38;5;124m'[39m][38;5;241m>[39ms[[38;5;124m'[39m[38;5;124msunrise[39m[38;5;124m'[39m]
[1;32m     21[0m [38;5;66;03m# Apply the function to each row of the DataFrame[39;00m
[1;32m     22[0m [38;5;66;03m# Note: If 'valid' is not in the datetime format, you'll need to convert it first[39;00m
[0;32m---> 23[0m weather_data[[38;5;124m'[39m[38;5;124msunrise[39m[38;5;124m'[39m] [38;5;241m=[39m [43mweather_data[49m[38;5;241;43m.[39;49m[43mapply[49m[43m([49m[43mcalculate_sunrise[49m[43m,[49m[43m [49m[43maxis[49m[38;5;241;43m=[39;49m[38;5;241;43m1[39;49m[43m)[49m
[1;32m     24[0m weather_data[[38;5;124m'[39m[38;5;124msunset[39m[38;5;124m'[39m] [38;5;241m=[39m weather_data[38;5;241m.[39mapply(calculate_sunset, axis[38;5;241m=[39m[38;5;241m1[39m)
[1;32m     25[0m weather_data[[38;5;124m'[39m[38;5;124mdaylight[39m[38;5;124m'[39m] [38;5;241m=[39m weather_data[38;5;241m.[39mapply(calculate_daylight, axis[38;5;241m=[39m[38;5;241m1[39m)

File [0;32m~/github/aet-cs/aet-cs.github.io/white/ML/env/lib/python3.11/site-packages/pandas/core/frame.py:10374[0m, in [0;36mDataFrame.apply[0;34m(self, func, axis, raw, result_type, args, by_row, engine, engine_kwargs, **kwargs)[0m
[1;32m  10360[0m [38;5;28;01mfrom[39;00m [38;5;21;01mpandas[39;00m[38;5;21;01m.[39;00m[38;5;21;01mcore[39;00m[38;5;21;01m.[39;00m[38;5;21;01mapply[39;00m [38;5;28;01mimport[39;00m frame_apply
[1;32m  10362[0m op [38;5;241m=[39m frame_apply(
[1;32m  10363[0m     [38;5;28mself[39m,
[1;32m  10364[0m     func[38;5;241m=[39mfunc,
[0;32m   (...)[0m
[1;32m  10372[0m     kwargs[38;5;241m=[39mkwargs,
[1;32m  10373[0m )
[0;32m> 10374[0m [38;5;28;01mreturn[39;00m [43mop[49m[38;5;241;43m.[39;49m[43mapply[49m[43m([49m[43m)[49m[38;5;241m.[39m__finalize__([38;5;28mself[39m, method[38;5;241m=[39m[38;5;124m"[39m[38;5;124mapply[39m[38;5;124m"[39m)

File [0;32m~/github/aet-cs/aet-cs.github.io/white/ML/env/lib/python3.11/site-packages/pandas/core/apply.py:916[0m, in [0;36mFrameApply.apply[0;34m(self)[0m
[1;32m    913[0m [38;5;28;01melif[39;00m [38;5;28mself[39m[38;5;241m.[39mraw:
[1;32m    914[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39mapply_raw(engine[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39mengine, engine_kwargs[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39mengine_kwargs)
[0;32m--> 916[0m [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mapply_standard[49m[43m([49m[43m)[49m

File [0;32m~/github/aet-cs/aet-cs.github.io/white/ML/env/lib/python3.11/site-packages/pandas/core/apply.py:1063[0m, in [0;36mFrameApply.apply_standard[0;34m(self)[0m
[1;32m   1061[0m [38;5;28;01mdef[39;00m [38;5;21mapply_standard[39m([38;5;28mself[39m):
[1;32m   1062[0m     [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39mengine [38;5;241m==[39m [38;5;124m"[39m[38;5;124mpython[39m[38;5;124m"[39m:
[0;32m-> 1063[0m         results, res_index [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mapply_series_generator[49m[43m([49m[43m)[49m
[1;32m   1064[0m     [38;5;28;01melse[39;00m:
[1;32m   1065[0m         results, res_index [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mapply_series_numba()

File [0;32m~/github/aet-cs/aet-cs.github.io/white/ML/env/lib/python3.11/site-packages/pandas/core/apply.py:1081[0m, in [0;36mFrameApply.apply_series_generator[0;34m(self)[0m
[1;32m   1078[0m [38;5;28;01mwith[39;00m option_context([38;5;124m"[39m[38;5;124mmode.chained_assignment[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m):
[1;32m   1079[0m     [38;5;28;01mfor[39;00m i, v [38;5;129;01min[39;00m [38;5;28menumerate[39m(series_gen):
[1;32m   1080[0m         [38;5;66;03m# ignore SettingWithCopy here in case the user mutates[39;00m
[0;32m-> 1081[0m         results[i] [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mfunc[49m[43m([49m[43mv[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mkwargs[49m[43m)[49m
[1;32m   1082[0m         [38;5;28;01mif[39;00m [38;5;28misinstance[39m(results[i], ABCSeries):
[1;32m   1083[0m             [38;5;66;03m# If we have a view on v, we need to make a copy because[39;00m
[1;32m   1084[0m             [38;5;66;03m#  series_generator will swap out the underlying data[39;00m
[1;32m   1085[0m             results[i] [38;5;241m=[39m results[i][38;5;241m.[39mcopy(deep[38;5;241m=[39m[38;5;28;01mFalse[39;00m)

Cell [0;32mIn[9], line 4[0m, in [0;36mcalculate_sunrise[0;34m(row)[0m
[1;32m      2[0m [38;5;28;01mdef[39;00m [38;5;21mcalculate_sunrise[39m(row):
[1;32m      3[0m     [38;5;66;03m# Extract the date from the 'valid' column (assuming it's already in datetime format)[39;00m
[0;32m----> 4[0m     valid_date [38;5;241m=[39m [43mrow[49m[43m[[49m[38;5;124;43m'[39;49m[38;5;124;43mvalid[39;49m[38;5;124;43m'[39;49m[43m][49m[38;5;241;43m.[39;49m[43mdate[49m()
[1;32m      5[0m     [38;5;66;03m# Calculate sunrise using the astral library[39;00m
[1;32m      6[0m     s [38;5;241m=[39m sun(city[38;5;241m.[39mobserver, date[38;5;241m=[39mvalid_date)

[0;31mAttributeError[0m: 'str' object has no attribute 'date'

