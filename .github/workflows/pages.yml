name: Build Jekyll with nbviewer Links

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"
          bundler-cache: true
          cache-version: 0

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Install dependencies
        run: |
          gem install bundler
          bundle install
          # Ensure remote theme is properly cached
          bundle exec jekyll clean

      - name: Convert notebook links to nbviewer
        run: |
          # Create a Python script to convert only notebook links
          cat > convert_links.py << 'EOF'
          import os
          import re
          import glob

          def convert_notebook_links(content, file_path="", repo_name="AET-CS/aet-cs.github.io", branch="main"):
              # Get the directory of the current file for relative path resolution
              file_dir = os.path.dirname(file_path) if file_path else ""

              # Pattern 1: Full GitHub Pages URLs
              pattern1 = r'https://aet-cs\.github\.io(/[^"\s)]*\.ipynb)'
              replacement1 = rf'https://nbviewer.jupyter.org/github/{repo_name}/blob/{branch}\1'
              content = re.sub(pattern1, replacement1, content)

              # Pattern 2: Relative links starting with / (absolute paths)
              pattern2 = r'href="(/[^"\s]*\.ipynb)"'
              replacement2 = rf'href="https://nbviewer.jupyter.org/github/{repo_name}/blob/{branch}\1"'
              content = re.sub(pattern2, replacement2, content)

              # Pattern 3: Relative links without leading / in href (need path resolution)
              def replace_relative_href(match):
                  relative_path = match.group(1)
                  if file_dir:
                      full_path = os.path.join(file_dir, relative_path).replace('\\', '/')
                  else:
                      full_path = relative_path
                  return f'href="https://nbviewer.jupyter.org/github/{repo_name}/blob/{branch}/{full_path}"'

              pattern3 = r'href="(?!http|/)([^"\s]*\.ipynb)"'
              content = re.sub(pattern3, replace_relative_href, content)

              # Pattern 4: Markdown links with full URLs
              pattern4 = r'\[([^\]]*)\]\(https://aet-cs\.github\.io(/[^)]*\.ipynb)\)'
              replacement4 = rf'[\1](https://nbviewer.jupyter.org/github/{repo_name}/blob/{branch}\2)'
              content = re.sub(pattern4, replacement4, content)

              # Pattern 5: Markdown links with absolute paths (starting with /)
              pattern5 = r'\[([^\]]*)\]\((/[^)]*\.ipynb)\)'
              replacement5 = rf'[\1](https://nbviewer.jupyter.org/github/{repo_name}/blob/{branch}\2)'
              content = re.sub(pattern5, replacement5, content)

              # Pattern 6: Markdown links with relative paths (need path resolution)
              def replace_relative_markdown(match):
                  link_text = match.group(1)
                  relative_path = match.group(2)
                  if file_dir:
                      full_path = os.path.join(file_dir, relative_path).replace('\\', '/')
                  else:
                      full_path = relative_path
                  return f'[{link_text}](https://nbviewer.jupyter.org/github/{repo_name}/blob/{branch}/{full_path})'

              pattern6 = r'\[([^\]]*)\]\((?!http|/)([^)]*\.ipynb)\)'
              content = re.sub(pattern6, replace_relative_markdown, content)

              return content

          # Process all markdown and HTML files
          for file_path in glob.glob("**/*.md", recursive=True) + glob.glob("**/*.html", recursive=True):
              if "_site" in file_path or "vendor" in file_path:
                  continue

              print(f"Processing: {file_path}")
              with open(file_path, 'r', encoding='utf-8') as f:
                  content = f.read()

              original_content = content
              content = convert_notebook_links(content, file_path)

              if content != original_content:
                  print(f"  âœ“ Converted notebook links in {file_path}")
                  with open(file_path, 'w', encoding='utf-8') as f:
                      f.write(content)

          print("Notebook link conversion complete! Jekyll will handle everything else.")
          EOF

          python convert_links.py

      - name: Build with Jekyll
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
